players2 <- players_stat_base[players_stat_base$MPG >= 20, ]
plot(players2$Efficiency, players2$Salary, pch=16, col = "darkgray", cex = 0.95, cex.lab = 1.1, cex.main = 1.5, xlab = "Efficiency", ylab = "Salary", main = "Efficiency and Salary (for players with MPG >= 20)")
players_stat_base$MPG
players2 <- players_stat_base[players_stat_base$MPG >= 20, ]
plot(players2$EFF, players2$Salary, pch=16, col = "darkgray", cex = 0.95, cex.lab = 1.1, cex.main = 1.5, xlab = "Efficiency", ylab = "Salary", main = "Efficiency and Salary (for players with MPG >= 20)")
lines(lowess(players2$Efficiency, players2$Salary), lwd = "4", col = "red")
players_stat_base$MPG
players2 <- players_stat_base[players_stat_base$MPG >= 20, ]
plot(players2$EFF, players2$Salary, pch=16, col = "darkgray", cex = 0.95, cex.lab = 1.1, cex.main = 1.5, xlab = "Efficiency", ylab = "Salary", main = "Efficiency and Salary (for players with MPG >= 20)")
lines(lowess(players2$EFF, players2$Salary), lwd = "4", col = "red")
cor(players2$Efficiency, players2$Salary)
players_stat_base$MPG
players2 <- players_stat_base[players_stat_base$MPG >= 20, ]
plot(players2$EFF, players2$Salary, pch=16, col = "darkgray", cex = 0.95, cex.lab = 1.1, cex.main = 1.5, xlab = "Efficiency", ylab = "Salary", main = "Efficiency and Salary (for players with MPG >= 20)")
lines(lowess(players2$EFF, players2$Salary), lwd = "4", col = "red")
cor(players2$EFF, players2$Salary)
players2 <- players_stat_base[players_stat_base$MPG >= 20, ]
plot(players2$EFF, players2$Salary, pch=16, col = "darkgray", cex = 0.95, cex.lab = 1.1, cex.main = 1.5, xlab = "Efficiency", ylab = "Salary", main = "Efficiency and Salary (for players with MPG >= 20)")
lines(lowess(players2$EFF, players2$Salary), lwd = "4", col = "red")
cor(players2$EFF, players2$Salary)
---
title: "HW 02 - Basics of Data Frames"
author: "Vitali Shypko"
date: "9/24/2017"
output: github_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
### Import the data in R
```{r}
# import data using read.csv() with specified column types
colClass_csv = c("character", # Player
"character", # Team
"factor",    # Position
"character", # Experience
"double",    # Salary
"integer",   # Rank
"integer",   # Age
"integer",   # GP
"integer",   # GS
"integer",   # MIN
"integer",   # FGM
"integer",   # FGA
"integer",   # Points3
"integer",   # Points3_atts
"integer",   # Points2
"integer",   # Points2_atts
"integer",   # FTM
"integer",   # FTA
"integer",   # OREB
"integer",   # DREB
"integer",   # AST
"integer",   # STL
"integer",   # BLK
"integer")   # TO
players_stat_base <- read.csv('data/nba2017-player-statistics.csv', stringsAsFactors = FALSE,
colClasses = colClass_csv)
str(players_stat_base)
```
```{r}
# import data using readr's read_csv() with specified column types
library("readr")
players_stat_readr <- read_csv('data/nba2017-player-statistics.csv',
col_types = cols(
col_character(), # Player
col_character(), # Team
col_factor(c("C", "PF", "PG", "SF", "SG")),    # Position
col_character(), # Experience
col_double(),    # Salary
col_integer(),   # Rank
col_integer(),   # Age
col_integer(),   # GP
col_integer(),   # GS
col_integer(),   # MIN
col_integer(),   # FGM
col_integer(),   # FGA
col_integer(),   # Points3
col_integer(),   # Points3_atts
col_integer(),   # Points2
col_integer(),   # Points2_atts
col_integer(),   # FTM
col_integer(),   # FTA
col_integer(),   # OREB
col_integer(),   # DREB
col_integer(),   # AST
col_integer(),   # STL
col_integer(),   # BLK
col_integer()))
str(players_stat_readr)
```
***
### Right after importing the data
```{r}
# replace all the occurences of "R" in Experience column and convert the column to integers.
# column conversion happens implicitly
players_stat_base$Experience <- as.integer(replace(players_stat_base$Experience,
players_stat_base$Experience=="R", 1))
players_stat_readr$Experience <- as.integer(replace(players_stat_readr$Experience,
players_stat_readr$Experience=="R", 1))
```
***
### Performance of players
```{r}
players_stat_base$Missed_FG = players_stat_base$FGA - players_stat_base$FGM
players_stat_base$Missed_FT = players_stat_base$FTA - players_stat_base$FTM
players_stat_base$PTS = players_stat_base$Points2 + players_stat_base$Points3 + players_stat_base$FTM + players_stat_base$FGM
players_stat_base$REB = players_stat_base$OREB + players_stat_base$DREB
players_stat_base$MPG = players_stat_base$MIN / players_stat_base$GP
Missed_FG = players_stat_base$Missed_FG
Missed_FT = players_stat_base$Missed_FT
PTS = players_stat_base$PTS
REB = players_stat_base$REB
MPG = players_stat_base$MPG
AST = players_stat_base$AST
STL = players_stat_base$STL
BLK = players_stat_base$BLK
TO = players_stat_base$TO
GP = players_stat_base$GP
# computing EFF
players_stat_base$EFF = (PTS + REB + AST + STL + BLK - Missed_FG - Missed_FT - TO) / GP
EFF = players_stat_base$EFF
summary(EFF)
hist(EFF, main = "Histogram of Efficiency (EFF)", xlab = "EFF", ylab = "Frequency", col = "gray")
```
```{r}
# Player name, team, salary, and EFF value of the top-10 players by EFF in decreasing order
head(players_stat_base[order(players_stat_base$EFF, decreasing = TRUE), c("Player", "Team", "Salary", "EFF")], n = 10)
```
```{r}
# Provide the names of the players that have a negative EFF.
players_stat_base[players_stat_base$EFF < 0, "Player"]
```
```{r}
# Use the function cor() to compute the correlation coefficients between EFF and all the variables used in the EFF formula.
EFF_PTS = cor(EFF, PTS)
EFF_REB = cor(EFF, REB)
EFF_STL = cor(EFF, STL)
EFF_AST = cor(EFF, AST)
EFF_BLK = cor(EFF, BLK)
EFF_Missed_FT = -cor(EFF, Missed_FT)
EFF_Missed_FG = -cor(EFF, Missed_FG)
EFF_TO = -cor(EFF, TO)
```
```{r}
# Display the computed correlations in descending order, either in a vector or a data frame. And create a barchart with the correlations (bars in decreasing order) like the one below.
EFF_cor <- sort(c(EFF_PTS, EFF_REB, EFF_STL, EFF_AST, EFF_BLK, EFF_Missed_FT, EFF_Missed_FG, EFF_TO), decreasing = TRUE)
EFF_cor
barplot(EFF_cor, main = "Correlations between Player Stats and EFF", col = c("gray", "gray", "gray", "gray", "gray", "red", "red", "red"))
```
***
### Efficiency and Salary
```{r}
# a scatterplot between Efficiency and Salary
plot(players_stat_base$EFF, players_stat_base$Salary, pch=16, col = "darkgray", cex = 0.95, cex.lab = 1.1, cex.main = 1.5, xlab = "Efficiency", ylab = "Salary", main = "Efficiency and Salary")
lines(lowess(players_stat_base$EFF, players_stat_base$Salary), lwd = "4", col = "red")
cor(players_stat_base$EFF, players_stat_base$Salary)
```
There seems to be a dependency between Salary and Efficiency. In general, the more efficient a player is, the higher his salary is.
```{r}
players2 <- players_stat_base[players_stat_base$MPG >= 20, ]
plot(players2$EFF, players2$Salary, pch=16, col = "darkgray", cex = 0.95, cex.lab = 1.1, cex.main = 1.5, xlab = "Efficiency", ylab = "Salary", main = "Efficiency and Salary (for players with MPG >= 20)")
lines(lowess(players2$EFF, players2$Salary), lwd = "4", col = "red")
cor(players2$EFF, players2$Salary)
```
What can you say about the relationship between these two variables for the set of “more established players”?
***
### Comments and Reflections
- What things were hard, even though you saw them in class/lab?
>I don't recall anything hard that I had to do in this lab that was already covered in class.
- What was easy(-ish) even though we haven’t done it in class/lab?
>Installing and using readr package was pretty straightforward.
- Did you need help to complete the assignment? If so, what kind of help?
>I didn't understand how to add additional variables to my data frame in part 4. I asked about it on Piazza and received help.
- How much time did it take to complete this HW?
>I spent about 5-6 hours to complete this homework.
- What was the most time consuming part?
>In Part 4 I didn't get how to add additional variables to my data frame. I had to wait for an answer on Piazza, so that part took the longest time to complete.
- Was there anything that you did not understand? or fully grasped?
>No, I think I understood every part of the lab.
- Was there anything frustrating in particular?
>One frustrating thing was figuring out the necessary format that col_types expects in read_csv. I tried to reuse the column types list I created for base data.csv method, but it didn't work.
- Was there anything exciting? Something that you feel proud of? (Don’t be shy, we won’t tell anyone).
>The exciting thing for me in this lab was that I started to realize how flexible data analysis may be. There are so many parameters that influence each other. It feels great to be able to analyze the data and see the dependencies.
---
title: "HW 02 - Basics of Data Frames"
author: "Vitali Shypko"
date: "9/24/2017"
output: github_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
### Import the data in R
```{r}
# import data using read.csv() with specified column types
colClass_csv = c("character", # Player
"character", # Team
"factor",    # Position
"character", # Experience
"double",    # Salary
"integer",   # Rank
"integer",   # Age
"integer",   # GP
"integer",   # GS
"integer",   # MIN
"integer",   # FGM
"integer",   # FGA
"integer",   # Points3
"integer",   # Points3_atts
"integer",   # Points2
"integer",   # Points2_atts
"integer",   # FTM
"integer",   # FTA
"integer",   # OREB
"integer",   # DREB
"integer",   # AST
"integer",   # STL
"integer",   # BLK
"integer")   # TO
players_stat_base <- read.csv('data/nba2017-player-statistics.csv', stringsAsFactors = FALSE,
colClasses = colClass_csv)
str(players_stat_base)
```
```{r}
# import data using readr's read_csv() with specified column types
library("readr")
players_stat_readr <- read_csv('data/nba2017-player-statistics.csv',
col_types = cols(
col_character(), # Player
col_character(), # Team
col_factor(c("C", "PF", "PG", "SF", "SG")),    # Position
col_character(), # Experience
col_double(),    # Salary
col_integer(),   # Rank
col_integer(),   # Age
col_integer(),   # GP
col_integer(),   # GS
col_integer(),   # MIN
col_integer(),   # FGM
col_integer(),   # FGA
col_integer(),   # Points3
col_integer(),   # Points3_atts
col_integer(),   # Points2
col_integer(),   # Points2_atts
col_integer(),   # FTM
col_integer(),   # FTA
col_integer(),   # OREB
col_integer(),   # DREB
col_integer(),   # AST
col_integer(),   # STL
col_integer(),   # BLK
col_integer()))
str(players_stat_readr)
```
***
### Right after importing the data
```{r}
# replace all the occurences of "R" in Experience column and convert the column to integers.
# column conversion happens implicitly
players_stat_base$Experience <- as.integer(replace(players_stat_base$Experience,
players_stat_base$Experience=="R", 1))
players_stat_readr$Experience <- as.integer(replace(players_stat_readr$Experience,
players_stat_readr$Experience=="R", 1))
```
***
### Performance of players
```{r}
players_stat_base$Missed_FG = players_stat_base$FGA - players_stat_base$FGM
players_stat_base$Missed_FT = players_stat_base$FTA - players_stat_base$FTM
players_stat_base$PTS = players_stat_base$Points2 + players_stat_base$Points3 + players_stat_base$FTM + players_stat_base$FGM
players_stat_base$REB = players_stat_base$OREB + players_stat_base$DREB
players_stat_base$MPG = players_stat_base$MIN / players_stat_base$GP
Missed_FG = players_stat_base$Missed_FG
Missed_FT = players_stat_base$Missed_FT
PTS = players_stat_base$PTS
REB = players_stat_base$REB
MPG = players_stat_base$MPG
AST = players_stat_base$AST
STL = players_stat_base$STL
BLK = players_stat_base$BLK
TO = players_stat_base$TO
GP = players_stat_base$GP
# computing EFF
players_stat_base$EFF = (PTS + REB + AST + STL + BLK - Missed_FG - Missed_FT - TO) / GP
EFF = players_stat_base$EFF
summary(EFF)
hist(EFF, main = "Histogram of Efficiency (EFF)", xlab = "EFF", ylab = "Frequency", col = "gray")
```
```{r}
# Player name, team, salary, and EFF value of the top-10 players by EFF in decreasing order
head(players_stat_base[order(players_stat_base$EFF, decreasing = TRUE), c("Player", "Team", "Salary", "EFF")], n = 10)
```
```{r}
# Provide the names of the players that have a negative EFF.
players_stat_base[players_stat_base$EFF < 0, "Player"]
```
```{r}
# Use the function cor() to compute the correlation coefficients between EFF and all the variables used in the EFF formula.
EFF_PTS = cor(EFF, PTS)
EFF_REB = cor(EFF, REB)
EFF_STL = cor(EFF, STL)
EFF_AST = cor(EFF, AST)
EFF_BLK = cor(EFF, BLK)
EFF_Missed_FT = -cor(EFF, Missed_FT)
EFF_Missed_FG = -cor(EFF, Missed_FG)
EFF_TO = -cor(EFF, TO)
```
```{r}
# Display the computed correlations in descending order, either in a vector or a data frame. And create a barchart with the correlations (bars in decreasing order) like the one below.
EFF_cor <- sort(c(EFF_PTS, EFF_REB, EFF_STL, EFF_AST, EFF_BLK, EFF_Missed_FT, EFF_Missed_FG, EFF_TO), decreasing = TRUE)
EFF_cor
barplot(EFF_cor, main = "Correlations between Player Stats and EFF", col = c("gray", "gray", "gray", "gray", "gray", "red", "red", "red"))
```
***
### Efficiency and Salary
```{r}
# a scatterplot between Efficiency and Salary
plot(players_stat_base$EFF, players_stat_base$Salary, pch=16, col = "darkgray", cex = 0.95, cex.lab = 1.1, cex.main = 1.5, xlab = "Efficiency", ylab = "Salary", main = "Efficiency and Salary")
lines(lowess(players_stat_base$EFF, players_stat_base$Salary), lwd = "4", col = "red")
cor(players_stat_base$EFF, players_stat_base$Salary)
```
There seems to be a dependency between Salary and Efficiency. In general, the more efficient a player is, the higher his salary is.
```{r}
players2 <- players_stat_base[players_stat_base$MPG >= 20, ]
plot(players2$EFF, players2$Salary, pch=16, col = "darkgray", cex = 0.95, cex.lab = 1.1, cex.main = 1.5, xlab = "Efficiency", ylab = "Salary", main = "Efficiency and Salary (for players with MPG >= 20)")
lines(lowess(players2$EFF, players2$Salary), lwd = "4", col = "red")
cor(players2$EFF, players2$Salary)
```
What can you say about the relationship between these two variables for the set of “more established players”?
***
### Comments and Reflections
- What things were hard, even though you saw them in class/lab?
>I don't recall anything hard that I had to do in this lab that was already covered in class.
- What was easy(-ish) even though we haven’t done it in class/lab?
>Installing and using readr package was pretty straightforward.
- Did you need help to complete the assignment? If so, what kind of help?
>I didn't understand how to add additional variables to my data frame in part 4. I asked about it on Piazza and received help.
- How much time did it take to complete this HW?
>I spent about 5-6 hours to complete this homework.
- What was the most time consuming part?
>In Part 4 I didn't get how to add additional variables to my data frame. I had to wait for an answer on Piazza, so that part took the longest time to complete.
- Was there anything that you did not understand? or fully grasped?
>No, I think I understood every part of the lab.
- Was there anything frustrating in particular?
>One frustrating thing was figuring out the necessary format that col_types expects in read_csv. I tried to reuse the column types list I created for base data.csv method, but it didn't work.
- Was there anything exciting? Something that you feel proud of? (Don’t be shy, we won’t tell anyone).
>The exciting thing for me in this lab was that I started to realize how flexible data analysis may be. There are so many parameters that influence each other. It feels great to be able to analyze the data and see the dependencies.
---
title: "HW 02 - Basics of Data Frames"
author: "Vitali Shypko"
date: "9/24/2017"
output: github_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
### Import the data in R
```{r}
# import data using read.csv() with specified column types
colClass_csv = c("character", # Player
"character", # Team
"factor",    # Position
"character", # Experience
"double",    # Salary
"integer",   # Rank
"integer",   # Age
"integer",   # GP
"integer",   # GS
"integer",   # MIN
"integer",   # FGM
"integer",   # FGA
"integer",   # Points3
"integer",   # Points3_atts
"integer",   # Points2
"integer",   # Points2_atts
"integer",   # FTM
"integer",   # FTA
"integer",   # OREB
"integer",   # DREB
"integer",   # AST
"integer",   # STL
"integer",   # BLK
"integer")   # TO
players_stat_base <- read.csv('data/nba2017-player-statistics.csv', stringsAsFactors = FALSE,
colClasses = colClass_csv)
str(players_stat_base)
```
```{r}
# import data using readr's read_csv() with specified column types
library("readr")
players_stat_readr <- read_csv('data/nba2017-player-statistics.csv',
col_types = cols(
col_character(), # Player
col_character(), # Team
col_factor(c("C", "PF", "PG", "SF", "SG")),    # Position
col_character(), # Experience
col_double(),    # Salary
col_integer(),   # Rank
col_integer(),   # Age
col_integer(),   # GP
col_integer(),   # GS
col_integer(),   # MIN
col_integer(),   # FGM
col_integer(),   # FGA
col_integer(),   # Points3
col_integer(),   # Points3_atts
col_integer(),   # Points2
col_integer(),   # Points2_atts
col_integer(),   # FTM
col_integer(),   # FTA
col_integer(),   # OREB
col_integer(),   # DREB
col_integer(),   # AST
col_integer(),   # STL
col_integer(),   # BLK
col_integer()))
str(players_stat_readr)
```
***
### Right after importing the data
```{r}
# replace all the occurences of "R" in Experience column and convert the column to integers.
# column conversion happens implicitly
players_stat_base$Experience <- as.integer(replace(players_stat_base$Experience,
players_stat_base$Experience=="R", 1))
players_stat_readr$Experience <- as.integer(replace(players_stat_readr$Experience,
players_stat_readr$Experience=="R", 1))
```
***
### Performance of players
```{r}
players_stat_base$Missed_FG = players_stat_base$FGA - players_stat_base$FGM
players_stat_base$Missed_FT = players_stat_base$FTA - players_stat_base$FTM
players_stat_base$PTS = players_stat_base$Points2 + players_stat_base$Points3 + players_stat_base$FTM + players_stat_base$FGM
players_stat_base$REB = players_stat_base$OREB + players_stat_base$DREB
players_stat_base$MPG = players_stat_base$MIN / players_stat_base$GP
Missed_FG = players_stat_base$Missed_FG
Missed_FT = players_stat_base$Missed_FT
PTS = players_stat_base$PTS
REB = players_stat_base$REB
MPG = players_stat_base$MPG
AST = players_stat_base$AST
STL = players_stat_base$STL
BLK = players_stat_base$BLK
TO = players_stat_base$TO
GP = players_stat_base$GP
# computing EFF
players_stat_base$EFF = (PTS + REB + AST + STL + BLK - Missed_FG - Missed_FT - TO) / GP
EFF = players_stat_base$EFF
summary(EFF)
hist(EFF, main = "Histogram of Efficiency (EFF)", xlab = "EFF", ylab = "Frequency", col = "gray")
```
```{r}
# Player name, team, salary, and EFF value of the top-10 players by EFF in decreasing order
head(players_stat_base[order(players_stat_base$EFF, decreasing = TRUE), c("Player", "Team", "Salary", "EFF")], n = 10)
```
```{r}
# Provide the names of the players that have a negative EFF.
players_stat_base[players_stat_base$EFF < 0, "Player"]
```
```{r}
# Use the function cor() to compute the correlation coefficients between EFF and all the variables used in the EFF formula.
EFF_PTS = cor(EFF, PTS)
EFF_REB = cor(EFF, REB)
EFF_STL = cor(EFF, STL)
EFF_AST = cor(EFF, AST)
EFF_BLK = cor(EFF, BLK)
EFF_Missed_FT = -cor(EFF, Missed_FT)
EFF_Missed_FG = -cor(EFF, Missed_FG)
EFF_TO = -cor(EFF, TO)
```
```{r}
# Display the computed correlations in descending order, either in a vector or a data frame. And create a barchart with the correlations (bars in decreasing order) like the one below.
EFF_cor <- sort(c(EFF_PTS, EFF_REB, EFF_STL, EFF_AST, EFF_BLK, EFF_Missed_FT, EFF_Missed_FG, EFF_TO), decreasing = TRUE)
EFF_cor
barplot(EFF_cor, main = "Correlations between Player Stats and EFF", col = c("gray", "gray", "gray", "gray", "gray", "red", "red", "red"))
```
***
### Efficiency and Salary
```{r}
# a scatterplot between Efficiency and Salary
plot(players_stat_base$EFF, players_stat_base$Salary, pch=16, col = "darkgray", cex = 0.95, cex.lab = 1.1, cex.main = 1.5, xlab = "Efficiency", ylab = "Salary", main = "Efficiency and Salary")
lines(lowess(players_stat_base$EFF, players_stat_base$Salary), lwd = "4", col = "red")
cor(players_stat_base$EFF, players_stat_base$Salary)
```
There seems to be a dependency between Salary and Efficiency. In general, the more efficient a player is, the higher his salary is.
```{r}
players2 <- players_stat_base[players_stat_base$MPG >= 20, ]
plot(players2$EFF, players2$Salary, pch=16, col = "darkgray", cex = 0.95, cex.lab = 1.1, cex.main = 1.5, xlab = "Efficiency", ylab = "Salary", main = "Efficiency and Salary (for players with MPG >= 20)")
lines(lowess(players2$EFF, players2$Salary), lwd = "4", col = "red")
cor(players2$EFF, players2$Salary)
```
What can you say about the relationship between these two variables for the set of “more established players”?
***
### Comments and Reflections
-What things were hard, even though you saw them in class/lab?
>I don't recall anything hard that I had to do in this lab that was already covered in class.
-What was easy(-ish) even though we haven’t done it in class/lab?
>Installing and using readr package was pretty straightforward.
-Did you need help to complete the assignment? If so, what kind of help?
>I didn't understand how to add additional variables to my data frame in part 4. I asked about it on Piazza and received help.
-How much time did it take to complete this HW?
>I spent about 5-6 hours to complete this homework.
-What was the most time consuming part?
>In Part 4 I didn't get how to add additional variables to my data frame. I had to wait for an answer on Piazza, so that part took the longest time to complete.
-Was there anything that you did not understand? or fully grasped?
>No, I think I understood every part of the lab.
-Was there anything frustrating in particular?
>One frustrating thing was figuring out the necessary format that col_types expects in read_csv. I tried to reuse the column types list I created for base data.csv method, but it didn't work.
-Was there anything exciting? Something that you feel proud of? (Don’t be shy, we won’t tell anyone).
>The exciting thing for me in this lab was that I started to realize how flexible data analysis may be. There are so many parameters that influence each other. It feels great to be able to analyze the data and see the dependencies.
